"""
This module contains four napari widgets declared in
different ways:

- a pure Python function flagged with `autogenerate: true`
    in the plugin manifest. Type annotations are used by
    magicgui to generate widgets for each parameter. Best
    suited for simple processing tasks - usually taking
    in and/or returning a layer.
- a `magic_factory` decorated function. The `magic_factory`
    decorator allows us to customize aspects of the resulting
    GUI, including the widgets associated with each parameter.
    Best used when you have a very simple processing task,
    but want some control over the autogenerated widgets. If you
    find yourself needing to define lots of nested functions to achieve
    your functionality, maybe look at the `Container` widget!
- a `magicgui.widgets.Container` subclass. This provides lots
    of flexibility and customization options while still supporting
    `magicgui` widgets and convenience methods for creating widgets
    from type annotations. If you want to customize your widgets and
    connect callbacks, this is the best widget option for you.
- a `QWidget` subclass. This provides maximal flexibility but requires
    full specification of widget layouts, callbacks, events, etc.

References:
- Widget specification: https://napari.org/stable/plugins/guides.html?#widgets
- magicgui docs: https://pyapp-kit.github.io/magicgui/

Replace code below according to your needs.
"""
from typing import TYPE_CHECKING

from magicgui import magic_factory
from magicgui.widgets import CheckBox, Container, create_widget
from qtpy.QtWidgets import QHBoxLayout, QPushButton, QWidget
from skimage.util import img_as_float

if TYPE_CHECKING:
    import napari


# Uses the `autogenerate: true` flag in the plugin manifest
# to indicate it should be wrapped as a magicgui to autogenerate
# a widget.


def threshold_autogenerate_widget(
    img: "napari.types.ImageData",
    threshold: "float", 
) -> "napari.types.LabelsData":
    return img_as_float(img) > threshold

import numpy as np
import cv2
import math
from skimage import filters
from magicgui import magic_factory
from napari.types import ImageData, LabelsData
# the magic_factory decorator lets us customize aspects of our widget
# we specify a widget type for the threshold parameter
# and use auto_call=True so the function is called whenever
# the value of a parameter changes
class HuangThresholding:
    def __init__(self, data):
        self.data = data
        self.first_bin, self.last_bin = self.find_bin_limits()
        self.term = 1.0 / max(1, self.last_bin - self.first_bin)
        self.mu_0, self.mu_1 = self.calculate_mu()

    def find_bin_limits(self):
        non_zero_indices = np.nonzero(self.data)[0]
        first_bin = non_zero_indices[0]
        last_bin = non_zero_indices[-1]
        return first_bin, last_bin

    def calculate_mu(self):
        indices = np.arange(len(self.data))
        num_pix_cumsum = np.cumsum(self.data)
        sum_pix_cumsum = np.cumsum(indices * self.data)
        mu_0 = sum_pix_cumsum / np.where(num_pix_cumsum == 0, 1, num_pix_cumsum)
        
        num_pix_cumsum_rev = np.cumsum(self.data[::-1])[::-1]
        sum_pix_cumsum_rev = np.cumsum((indices[::-1]) * self.data[::-1])[::-1]
        mu_1 = sum_pix_cumsum_rev / np.where(num_pix_cumsum_rev == 0, 1, num_pix_cumsum_rev)

        return mu_0, mu_1

    def calculate_entropy(self, it):
        ent = 0.0
        for ih in range(it):
            mu_x = 1.0 / (1.0 + self.term * abs(ih - self.mu_0[it]))
            if not (mu_x < 1e-6 or mu_x > 1 - 1e-6):
                ent -= self.data[ih] * (
                    mu_x * math.log(mu_x) + (1.0 - mu_x) * math.log(1.0 - mu_x)
                )

        for ih in range(it + 1, len(self.data)):
            mu_x = 1.0 / (1.0 + self.term * abs(ih - self.mu_1[it]))
            if not (mu_x < 1e-6 or mu_x > 1 - 1e-6):
                ent -= self.data[ih] * (
                    mu_x * math.log(mu_x) + (1.0 - mu_x) * math.log(1.0 - mu_x)
                )

        return ent

    def find_threshold(self):
        threshold = -1
        min_ent = float("inf")
        for it in range(self.first_bin, self.last_bin + 1):
            ent = self.calculate_entropy(it)
            if ent < min_ent:
                min_ent = ent
                threshold = it

        return threshold


@magic_factory(
    threshold={"widget_type": "FloatSlider", "max": 1}, auto_call=True
)
def threshold_magic_widget(
    img_layer: "napari.layers.Image", threshold: "float"
) -> "napari.types.LabelsData":
    return img_as_float(img_layer.data) > threshold

import cv2
from skimage import io
import matplotlib.pyplot as plt
import numpy as np
from napari.types import LabelsData, ImageData
from magicgui import magic_factory
from skimage import filters

import skimage
import cv2
import numpy as np
from skimage import filters
from magicgui import magic_factory
from napari.types import ImageData, LabelsData
from skimage.io import imread
from skimage.color import rgb2gray
from skimage.filters import threshold_otsu, threshold_li, threshold_yen, threshold_triangle



# Import necessary libraries
import cv2
import numpy as np
from napari.types import ImageData, LabelsData
from magicgui import magic_factory
from skimage import filters

# Define the function with the decorator
@magic_factory(call_button="Run", filter_selected={"choices": ["shanbhag", "li", "otsu", "huang","yen","triangle"]})
def apply_threshold(selected_image: ImageData, filter_selected='shanbhag') -> LabelsData:
    if filter_selected == "shanbhag":
        # Convert the image to grayscale if it's not already
        if len(selected_image.shape) == 3:
            selected_image = cv2.cvtColor(selected_image, cv2.COLOR_BGR2GRAY)

        # Compute the histogram
        hist, bin_edges = np.histogram(selected_image.flatten(), bins=256, range=(0, 256))

        # Normalize the histogram
        hist = hist.astype(np.float32)
        hist /= hist.sum()

        c_hist = np.cumsum(hist)
        c_hist_sq = c_hist ** 2
        bc1 = np.cumsum(hist * (np.arange(1, 257)))
        bc1_sq = bc1 ** 2

        s1 = np.zeros_like(hist)
        for i in range(256):
            s1[i] = np.sum(hist[:i + 1] * np.log1p(hist[:i + 1])) if np.sum(hist[:i + 1]) > 0 else 0
        s2 = np.zeros_like(hist)
        for i in range(256):
            s2[i] = np.sum(hist[i + 1:] * np.log1p(hist[i + 1:])) if np.sum(hist[i + 1:]) > 0 else 0

        s = s1 + s2
        k = np.arange(256)
        shanbhag_criterion = -2 * k * s + bc1 - c_hist_sq

        threshold = np.argmin(shanbhag_criterion)

        # Apply the threshold to the image to create a binary image
        _, binary_image = cv2.threshold(selected_image, threshold, 255, cv2.THRESH_BINARY)

        # Convert binary image to label data (0 and 1 labels)
        label_data = binary_image.astype(np.uint8)

        return label_data
    elif filter_selected == "li":
        ths = filters.threshold_li(selected_image)
        mask = (selected_image > ths)
        return mask.astype(np.uint8)
    elif filter_selected == "otsu":
        # Otsu's thresholding
        if len(selected_image.shape) == 3:
            selected_image = cv2.cvtColor(selected_image, cv2.COLOR_BGR2GRAY)

        threshold = filters.threshold_otsu(selected_image)
        mask = (selected_image > threshold)
        return mask.astype(np.uint8)
    
    elif filter_selected == "huang":
        if len(selected_image.shape) == 3:
            selected_image = cv2.cvtColor(selected_image, cv2.COLOR_BGR2GRAY)

        hist, _ = np.histogram(selected_image.flatten(), bins=256, range=(0, 256))

        huang_thresholder = HuangThresholding(hist)
        threshold = huang_thresholder.find_threshold()

        _, binary_image = cv2.threshold(selected_image, threshold, 255, cv2.THRESH_BINARY)

        label_data = binary_image.astype(np.uint8)
        return label_data
    elif filter_selected == "yen":
        ths = filters.threshold_yen(selected_image)
        mask = (selected_image > ths)
        return mask.astype(np.uint8)
    elif filter_selected == "triangle":
        ths = filters.threshold_triangle(selected_image)
        mask = (selected_image > ths)
        return mask.astype(np.uint8)


# Ensure that the function is imported properly if you are running it in a separate script or module.






# if we want even more control over our widget, we can use
# magicgui `Container`
class ImageThreshold(Container):
    def __init__(self, viewer: "napari.viewer.Viewer"):
        super().__init__()
        self._viewer = viewer
        # use create_widget to generate widgets from type annotations
        self._image_layer_combo = create_widget(
            label="Image", annotation="napari.layers.Image"
        )
        self._threshold_slider = create_widget(
            label="Threshold", annotation=float, widget_type="FloatSlider"
        )
        self._threshold_slider.min = 0
        self._threshold_slider.max = 1
        # use magicgui widgets directly
        self._invert_checkbox = CheckBox(text="Keep pixels below threshold")

        # connect your own callbacks
        self._threshold_slider.changed.connect(self._threshold_im)
        self._invert_checkbox.changed.connect(self._threshold_im)

        # append into/extend the container with your widgets
        self.extend(
            [
                self._image_layer_combo,
                self._threshold_slider,
                self._invert_checkbox,
            ]
        )

    def _threshold_im(self):
        image_layer = self._image_layer_combo.value
        if image_layer is None:
            return

        image = img_as_float(image_layer.data)
        name = image_layer.name + "_thresholded"
        threshold = self._threshold_slider.value
        if self._invert_checkbox.value:
            thresholded = image < threshold
        else:
            thresholded = image > threshold
        if name in self._viewer.layers:
            self._viewer.layers[name].data = thresholded
        else:
            self._viewer.add_labels(thresholded, name=name)


class ExampleQWidget(QWidget):
    # your QWidget.__init__ can optionally request the napari viewer instance
    # use a type annotation of 'napari.viewer.Viewer' for any parameter
    def __init__(self, viewer: "napari.viewer.Viewer"):
        super().__init__()
        self.viewer = viewer

        btn = QPushButton("Click me!")
        btn.clicked.connect(self._on_click)

        self.setLayout(QHBoxLayout())
        self.layout().addWidget(btn)

    def _on_click(self):
        print("napari has", len(self.viewer.layers), "layers")
